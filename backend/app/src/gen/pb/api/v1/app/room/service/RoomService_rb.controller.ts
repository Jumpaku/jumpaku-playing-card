// @generated by protoc-gen-restobuf-nestjs v1 with parameter "target=ts,import_extension=js"
// @generated from file api/v1/app/room/service.proto (package api.v1.app.room, syntax proto3)
/* eslint-disable */

import { Body, Controller, Get, Param, Post, Query, Req, Res } from "@nestjs/common";
import { RoomServiceService } from "./RoomService_rb.service";
import { AccessControl } from "../../../access_control.decorator";
import type { JsonObject, JsonValue } from "@bufbuild/protobuf";
import { fromJson, toJson } from "@bufbuild/protobuf";
import { Request, Response } from "express";
import { CreateRoomRequestSchema, CreateRoomResponseSchema, GetRoomRequestSchema, GetRoomResponseSchema } from "../service_pb.js";

@Controller() 
export class RoomServiceController {
  constructor(private service: RoomServiceService) {}

  @Post('/api/v1/app/room')
  @AccessControl({
    scopePath: "api.v1.app.room.RoomService.CreateRoom",
    require: [
      "room:create",
    ]
  }) 
  async handleCreateRoom(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonValue> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    const input = fromJson(CreateRoomRequestSchema, body);
    const output = await this.service.handleCreateRoom(input, req, res);
    return toJson(CreateRoomResponseSchema, output);
  }

  @Get('/api/v1/app/room/:room_id')
  @AccessControl({
    scopePath: "api.v1.app.room.RoomService.GetRoom",
    require: [
      "room:get",
    ]
  }) 
  async handleGetRoom(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonValue> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    setMessageField(body, ["room_id"], pathParams['room_id']);
    const input = fromJson(GetRoomRequestSchema, body);
    const output = await this.service.handleGetRoom(input, req, res);
    return toJson(GetRoomResponseSchema, output);
  }

}

function setMessageField(message: JsonObject, fieldPath: string[], value: string): JsonValue {
    if(fieldPath.length === 0) {
        throw new Error("fieldPath must not be empty");
    }
    const [field, ...rest] = fieldPath;
    if (fieldPath.length === 1) {
        message[field] = value;
        return message;
    }else {
        message[field] ??= {};
        return setMessageField(message[field] as JsonObject , rest, value);
    }
}
