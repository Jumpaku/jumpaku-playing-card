// @generated by protoc-gen-restobuf-nestjs v1 with parameter "target=ts,import_extension=js"
// @generated from file api/v1/app/user/service.proto (package api.v1.app.user, syntax proto3)
/* eslint-disable */

import { Body, Controller, Get, Param, Post, Put, Query, Req, Res } from "@nestjs/common";
import { UserServiceService } from "./UserService_rb.service";
import { AccessControl } from "../../../access_control.decorator";
import type { JsonObject, JsonValue } from "@bufbuild/protobuf";
import { fromJson, toJson } from "@bufbuild/protobuf";
import { Request, Response } from "express";
import { CreateUserRequestSchema, CreateUserResponseSchema, GetUserRequestSchema, GetUserResponseSchema, RegisterUserAuthenticationRequestSchema, RegisterUserAuthenticationResponseSchema } from "../service_pb.js";

@Controller() 
export class UserServiceController {
  constructor(private service: UserServiceService) {}

  @Post('/api/v1/app/user')
  @AccessControl({
    scopePath: "api.v1.app.user.UserService.CreateUser",
    require: [
      "user:create",
    ]
  }) 
  async handleCreateUser(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonValue> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    const input = fromJson(CreateUserRequestSchema, body);
    const output = await this.service.handleCreateUser(input, req, res);
    return toJson(CreateUserResponseSchema, output);
  }

  @Get('/api/v1/app/user/:user_id')
  @AccessControl({
    scopePath: "api.v1.app.user.UserService.GetUser",
    require: [
      "user:get",
    ]
  }) 
  async handleGetUser(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonValue> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    setMessageField(body, ["user_id"], pathParams['user_id']);
    const input = fromJson(GetUserRequestSchema, body);
    const output = await this.service.handleGetUser(input, req, res);
    return toJson(GetUserResponseSchema, output);
  }

  @Put('/api/v1/app/user/:user_id/authentication')
  @AccessControl({
    scopePath: "api.v1.app.user.UserService.AddUserAuthentication",
    require: [
      "user:add-authentication",
    ]
  }) 
  async handleAddUserAuthentication(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonValue> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    setMessageField(body, ["user_id"], pathParams['user_id']);
    const input = fromJson(RegisterUserAuthenticationRequestSchema, body);
    const output = await this.service.handleAddUserAuthentication(input, req, res);
    return toJson(RegisterUserAuthenticationResponseSchema, output);
  }

  @Put('/api/v1/app/user/:user_id/authentication')
  @AccessControl({
    scopePath: "api.v1.app.user.UserService.RemoveUserAuthentication",
    require: [
      "user:remove-authentication",
    ]
  }) 
  async handleRemoveUserAuthentication(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonValue> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    setMessageField(body, ["user_id"], pathParams['user_id']);
    const input = fromJson(RegisterUserAuthenticationRequestSchema, body);
    const output = await this.service.handleRemoveUserAuthentication(input, req, res);
    return toJson(RegisterUserAuthenticationResponseSchema, output);
  }

}

function setMessageField(message: JsonObject, fieldPath: string[], value: string): JsonValue {
    if(fieldPath.length === 0) {
        throw new Error("fieldPath must not be empty");
    }
    const [field, ...rest] = fieldPath;
    if (fieldPath.length === 1) {
        message[field] = value;
        return message;
    }else {
        message[field] ??= {};
        return setMessageField(message[field] as JsonObject , rest, value);
    }
}
