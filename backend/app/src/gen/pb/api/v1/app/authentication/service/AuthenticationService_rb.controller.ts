// @generated by protoc-gen-restobuf-nestjs v1 with parameter "target=ts,import_extension=js"
// @generated from file api/v1/app/authentication/service.proto (package api.v1.app.authentication, syntax proto3)
/* eslint-disable */

import { Body, Controller, Get, Param, Post, Put, Query, Req, Res } from "@nestjs/common";
import { AuthenticationServiceService } from "./AuthenticationService_rb.service";
import { AccessControl } from "../../../access_control.decorator";
import type { JsonObject, JsonValue } from "@bufbuild/protobuf";
import { fromJson, toJson } from "@bufbuild/protobuf";
import { Request, Response } from "express";
import { LogoutRequestSchema, LogoutResponseSchema, PasswordLoginRequestSchema, PasswordLoginResponseSchema, PasswordRegisterRequestSchema, PasswordRegisterResponseSchema, RefreshRequestSchema, RefreshResponseSchema, TemporaryRegisterRequestSchema, TemporaryRegisterResponseSchema } from "../service_pb.js";

@Controller() 
export class AuthenticationServiceController {
  constructor(private service: AuthenticationServiceService) {}

  @Put('/api/v1/app/authentication/logout')
  @AccessControl({
    scopePath: "api.v1.app.authentication.AuthenticationService.Logout",
    require: [
    ]
  }) 
  async handleLogout(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonValue> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    const input = fromJson(LogoutRequestSchema, body);
    const output = await this.service.handleLogout(input, req, res);
    return toJson(LogoutResponseSchema, output);
  }

  @Post('/api/v1/app/authentication/refresh')
  @AccessControl({
    scopePath: "api.v1.app.authentication.AuthenticationService.Refresh",
    require: [
    ]
  }) 
  async handleRefresh(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonValue> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    const input = fromJson(RefreshRequestSchema, body);
    const output = await this.service.handleRefresh(input, req, res);
    return toJson(RefreshResponseSchema, output);
  }

  @Get('/api/v1/app/authentication/temporary/register')
  @AccessControl({
    scopePath: "api.v1.app.authentication.AuthenticationService.TemporaryRegister",
    require: [
    ]
  }) 
  async handleTemporaryRegister(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonValue> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    const input = fromJson(TemporaryRegisterRequestSchema, body);
    const output = await this.service.handleTemporaryRegister(input, req, res);
    return toJson(TemporaryRegisterResponseSchema, output);
  }

  @Get('/api/v1/app/authentication/password/register')
  @AccessControl({
    scopePath: "api.v1.app.authentication.AuthenticationService.PasswordRegister",
    require: [
    ]
  }) 
  async handlePasswordRegister(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonValue> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    const input = fromJson(PasswordRegisterRequestSchema, body);
    const output = await this.service.handlePasswordRegister(input, req, res);
    return toJson(PasswordRegisterResponseSchema, output);
  }

  @Post('/api/v1/app/authentication/password/login')
  @AccessControl({
    scopePath: "api.v1.app.authentication.AuthenticationService.PasswordLogin",
    require: [
    ]
  }) 
  async handlePasswordLogin(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonValue> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    const input = fromJson(PasswordLoginRequestSchema, body);
    const output = await this.service.handlePasswordLogin(input, req, res);
    return toJson(PasswordLoginResponseSchema, output);
  }

}

function setMessageField(message: JsonObject, fieldPath: string[], value: string): JsonValue {
    if(fieldPath.length === 0) {
        throw new Error("fieldPath must not be empty");
    }
    const [field, ...rest] = fieldPath;
    if (fieldPath.length === 1) {
        message[field] = value;
        return message;
    }else {
        message[field] ??= {};
        return setMessageField(message[field] as JsonObject , rest, value);
    }
}
