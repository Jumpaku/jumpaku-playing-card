// @generated by protoc-gen-restobuf-nestjs v1 with parameter "target=ts,import_extension=js"
// @generated from file api/v1/example/example.proto (package api.v1, syntax proto3)
/* eslint-disable */

import { Body, Controller, Delete, Get, Param, Post, Put, Query, Req, Res } from "@nestjs/common";
import { ExampleServiceService } from "./ExampleService_rb.service";
import type { JsonObject, JsonValue } from "@bufbuild/protobuf";
import { fromJson, toJson } from "@bufbuild/protobuf";
import { Request, Response } from "express";
import { CreateExampleRequestSchema, CreateExampleResponseSchema, DeleteExampleRequestSchema, DeleteExampleResponseSchema, GetExampleRequestSchema, GetExampleResponseSchema, ListExampleRequestSchema, ListExampleResponseSchema, UpdateExampleRequestSchema, UpdateExampleResponseSchema } from "../example_pb.js";

@Controller() 
export class ExampleServiceController {
  constructor(private service: ExampleServiceService) {}

  @Get('/api/v1/example')
  async handleListExample(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonObject> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    const input = fromJson(ListExampleRequestSchema, body);
    const output = await this.service.handleListExample(input, req, res);
    return toJson(ListExampleResponseSchema, output);
  }

  @Get('/api/v1/example/:example_id')
  async handleGetExample(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonObject> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    setMessageField(body, ["example_id"], pathParams['example_id']);
    const input = fromJson(GetExampleRequestSchema, body);
    const output = await this.service.handleGetExample(input, req, res);
    return toJson(GetExampleResponseSchema, output);
  }

  @Put('/api/v1/example/:example_id')
  async handleUpdateExample(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonObject> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    setMessageField(body, ["example_id"], pathParams['example_id']);
    const input = fromJson(UpdateExampleRequestSchema, body);
    const output = await this.service.handleUpdateExample(input, req, res);
    return toJson(UpdateExampleResponseSchema, output);
  }

  @Post('/api/v1/example')
  async handleCreateExample(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonObject> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    const input = fromJson(CreateExampleRequestSchema, body);
    const output = await this.service.handleCreateExample(input, req, res);
    return toJson(CreateExampleResponseSchema, output);
  }

  @Delete('/api/v1/example/:example_id')
  async handleDeleteExample(
    @Param() pathParams: {[key: string]: string},
    @Query() queryParams: {[key: string]: string},
    @Body() body: JsonObject,
    @Req() req: Request,
    @Res({ passthrough: true}) res: Response,
  ): Promise<JsonObject> {
      body ??= {};
    for (const key in queryParams) {
      setMessageField(body, key.split('.'), queryParams[key]);
    }
    setMessageField(body, ["example_id"], pathParams['example_id']);
    const input = fromJson(DeleteExampleRequestSchema, body);
    const output = await this.service.handleDeleteExample(input, req, res);
    return toJson(DeleteExampleResponseSchema, output);
  }

}

function setMessageField(message: JsonObject, fieldPath: string[], value: string): JsonValue {
    if(fieldPath.length === 0) {
        throw new Error("fieldPath must not be empty");
    }
    const [field, ...rest] = fieldPath;
    if (fieldPath.length === 1) {
        message[field] = value;
        return message;
    }else {
        message[field] ??= {};
        return setMessageField(message[field] as JsonObject , rest, value);
    }
}
